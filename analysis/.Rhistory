t.test(c(169,125,197,167,128,186,161,142,226,173,125,139,226,121,150,159,231,207,145,201,151,142,158,115,102,149,198,201,196,151,132,160,152,235,148))
anova(c(169,125,197,167,128,186,161,142,226,173,125,139,226,121,150,159,231,207,145,201,151,142,158,115,102,149,198,201,196,151,132,160,152,235,148))
qnorm(0.05)
qnorm(0.025)
qnorm(0.001)
d1 <- c(193. 198)
d1 <- c(193, 198)
d2 <- c(180, 209)
t.test(d2, d1, paired = T)
t.test(d2, d1)
t.test(d2, d1, paired = T)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/computeCovCI.R', echo=TRUE)
View(s_baseline)
s_baseline$gender_code <- code_gender(s_baseline$age)
View(s_baseline)
s_baseline$gender
s_baseline$gender_code
code_gender <- function(e){
tmp <- rep(2, length(e))
tmp[e=="male"] <- 0
tmp[e=="female"] <- 1
print(tmp)
return (tmp)
}
s_baseline$gender_code <- code_gender(s_baseline$age)
s_baseline %>%
mutate(gender_code = ifelse(gender == "female", 1, 0))
View(s_baseline)
s_baseline$gender_code
s_baseline$gender[1]
s_baseline$gender[1,]
s_baseline$gender[,1]
s_baseline$gender[[1]]
s_baseline %>%
mutate(gender_code = ifelse(gender == "female", 1, 0))
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
s_baseline %>%
mutate(gender_code = ifelse(gender == "female", 1, 0)) %>%
mutate(whichMP_code = ifelse(whichMP == "VRMP", 1, 0))
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/computeCovCI.R', echo=TRUE)
s_baseline$gender_code
s_baseline %>%
mutate(s_baseline$gender_code = ifelse(gender == "female", 1, 0)) %>%
mutate(s_baseline$whichMP_code = ifelse(whichMP == "VRMP", 1, 0))
s_baseline %>%
mutate(gender_code = cut(gender, c("female", "male"), c(1, 0))) %>%
mutate(whichMP_code = cut(whichMP, c("VRMP", "MP"), c(1, 0)))
s_baseline %>%
mutate(gender_code = recode(gender, c("female", "male"), c(1, 0))) %>%
mutate(whichMP_code = recode(whichMP, c("VRMP", "MP"), c(1, 0)))
s_baseline %>%
mutate(gender_code = recode(gender, list("female" = "1", "male" = "0")) %>%
mutate(whichMP_code = recode(whichMP,list("VRMP" = "1", "MP" = "0"))
)
)))
s_baseline %>%
mutate(gender_code = recode(gender, list("female" = "1", "male" = "0"))) %>%
mutate(whichMP_code = recode(whichMP,list("VRMP" = "1", "MP" = "0")))
s_baseline %>%
mutate(recode(gender, list("female" = "1", "male" = "0")))
recode(s_baseline$gender, list("female" = "1", "male" = "0"))
recode(s_baseline$gender, list(female = "1", male = "0"))
recode(s_baseline$gender, list(female = 1, male = 0))
x <- sample(c("a", "b", "c"), 10, replace = TRUE)
recode(x, a = "Apple")
recode(s_baseline$gender, list(female = 1, male = 0))
recode(gender, list(female = 1, male = 0))
g <- s_baseline$gender
recode(g, list(female = 1, male = 0))
recode(g, female = 1)
s_baseline %>%
mutate(gender_code = recode(gender, !!!list("female" = "1", "male" = "0"))) %>%
mutate(whichMP_code = recode(whichMP,!!!list("VRMP" = "1", "MP" = "0")))
s_baseline$gender_code
s_baseline$gender
s_baseline %>%
mutate(gender_code = recode(gender, !!!list(female = "1", male = "0"))) %>%
mutate(whichMP_code = recode(whichMP,!!!list(VRMP = "1", MP = "0")))
s_baseline$gender
s_baseline$gender_code
s_baseline %>%
recode(gender, !!!list(female = "1", male = "0")) %>%
recode(whichMP,!!!list(VRMP = "1", MP = "0")))
s_baseline %>%
recode(gender, !!!list(female = "1", male = "0")) %>%
recode(whichMP,!!!list(VRMP = "1", MP = "0"))
s_baseline <- s_baseline %>%
mutate(gender_code = recode(gender, !!!list(female = "1", male = "0"))) %>%
mutate(whichMP_code = recode(whichMP,!!!list(VRMP = "1", MP = "0
)))
)
))))))
exit
CC
:q
)))))
quit()
>>>
sjhvsahb;asoib
)
%.%
%>%
)))))))))))))))))
s_baseline <- s_baseline %>%
mutate(gender_code = recode(gender, !!!list(female = "1", male = "0"))) %>%
mutate(whichMP_code = recode(whichMP,!!!list(VRMP = "1", MP = "0")))
s_baseline$gender_code
s_baseline <- s_baseline %>%
mutate(gender_code = recode(gender, !!!list(female = 1, male = 0))) %>%
mutate(whichMP_code = recode(whichMP,!!!list(VRMP = 1, MP = 0)))
s_baseline$gender_code
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/computeCovCI.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_cov_weight.R', echo=TRUE)
vif(cov_model)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_cov_weight.R', echo=TRUE)
s_baseline$age_code
summary(cov_model)
View(df_cov)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_cov_weight.R', echo=TRUE)
summary(cov_model)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/computeMixedEffectCI.R', echo=TRUE)
mp_model_recallcorrect <- lmer(formula = recallCorrectRatio ~ groupid +  (1 | userid), data = d)
summary(mp_model_recallcorrect)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/ML-Trust/analysis/r/main.R', echo=TRUE)
source('~/Documents/Github/ML-Trust/analysis/r/Q4-indidiff.R', echo=TRUE)
source('~/Documents/Github/ML-Trust/analysis/r/main.R', echo=TRUE)
d$reco   r.squaredGLMM(m_correct)
AIC(m_correct
r.squaredGLMM(m_correct)
AIC(m_correct
)
r.squaredGLMM(m_correct)
AIC(m_correct)
m_over
d_q4$Representation_code
r.squaredGLMM(m_over)
AIC(m_over)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
pdf('img/models.pdf', width = 5, height = 4.5, useDingbats=FALSE)
multiplot(model_recallCorrect, model_recall, model_recogAcc, model_recogConf, model_newidea,  cols = 1)
dev.off()
pdf('img/models.pdf', width = 5, height = 5.5, useDingbats=FALSE)
multiplot(model_recallCorrect, model_recall, model_recogAcc, model_recogConf, model_newidea,  cols = 1)
dev.off()
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
d$recogView()
View(df_model_recogacc)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
model_recogAcc\
model_recogAcc
View(df_model_recogacc)
mp_model_recogacc
d$recogAccuracy
mp_model_recogacc_fun <- function(dat, idx) {
fit <- lmer(formula = recogAccuracy ~ groupid +  (1 | userid), data = d_NA, subset = idx)
s <- summary(fit)
coef(s)
}
# model for recog accuracy
d_NA <- na.omit(d)
mp_model_recogacc <- lmer(formula = recogAccuracy ~ groupid +  (1 | userid), data = d_NA)
mp_model_recogacc_b <- boot(d, statistic= mp_model_recogacc_fun, R=modReplicates, parallel="multicore")
mp_model_recogacc_v1 <- boot.ci(mp_model_recogacc_b, type = bootMethod, conf =c(0.5, 0.95), index = 2)[[bootMethod]] # group1
mp_model_recogacc_v2 <- boot.ci(mp_model_recogacc_b, type = bootMethod, conf =c(0.5, 0.95), index = 3)[[bootMethod]] # group2
g1_rg <- c(coef(summary(mp_model_recogacc))[2,][[1]],
mp_model_recall_v1[1,][4], mp_model_recall_v1[1,][5],
mp_model_recall_v1[2,][4], mp_model_recall_v1[2,][5])
g2_rg <- c(coef(summary(mp_model_recogacc))[3,][[1]],
mp_model_recall_v2[1,][4], mp_model_recall_v2[1,][5],
mp_model_recall_v2[2,][4], mp_model_recall_v2[2,][5])
df_model_recogacc <- as.data.frame(rbind(g1_rg, g2_rg))
df_model_recogacc <- cbind(names, df_model_recogacc)
colnames(df_model_recogacc) <- c("whichMP", "meanValue", "lower50", "upper50", "lower95", "upper95")
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
g1_rg <- c(coef(summary(mp_model_recogacc))[2,][[1]],
mp_model_recogacc_v1[1,][4], mp_model_recogacc_v1[1,][5],
mp_model_recogacc_v1[2,][4], mp_model_recogacc_v1[2,][5])
g2_rg <- c(coef(summary(mp_model_recogacc))[3,][[1]],
mp_model_recogacc_v2[1,][4], mp_model_recogacc_v2[1,][5],
mp_model_recogacc_v2[2,][4], mp_model_recogacc_v2[2,][5])
df_model_recogacc <- as.data.frame(rbind(g1_rg, g2_rg))
df_model_recogacc <- cbind(names, df_model_recogacc)
colnames(df_model_recogacc) <- c("whichMP", "meanValue", "lower50", "upper50", "lower95", "upper95")
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_mixedeffect_model.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/main.R', echo=TRUE)
source('~/Documents/Github/MemoryPalaceVR_Light/analysis/plot_controllers.R', echo=TRUE)
